import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { User } from '../models/user.model';
import { UserService } from './user.service';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject: BehaviorSubject<User | null>;
  public currentUser: Observable<User | null>;

  constructor(private userService: UserService) {
    const storedUser = localStorage.getItem('currentUser');
    this.currentUserSubject = new BehaviorSubject<User | null>(storedUser ? JSON.parse(storedUser) : null);
    this.currentUser = this.currentUserSubject.asObservable();
  }

  public get currentUserValue(): User | null {
    return this.currentUserSubject.value;
  }

  login(email: string, password: string): boolean {
    const users = this.userService.getAllUsers();
    const user = users.find((u: User) => (u.email === email || u.username === email) && u.password === password);
    
    if (user) {
      localStorage.setItem('currentUser', JSON.stringify(user));
      this.currentUserSubject.next(user);
      return true;
    }
    return false;
  }

  register(userData: any): boolean {
    // Check if user already exists
    const existingUser = this.userService.getUserByEmail(userData.email);
    if (existingUser) {
      return false;
    }
    
    // Create new user object
    const newUser: User = {
      id: '', // Will be generated by UserService
      username: userData.username || userData.email,
      email: userData.email,
      password: userData.password,
      firstName: userData.firstName,
      lastName: userData.lastName,
      country: userData.country,
      region: userData.region,
      favorites: []
    };
    
    const result = this.userService.addUser(newUser);
    if (result) {
      // Get the user with the generated ID
      const createdUser = this.userService.getUserByEmail(userData.email);
      if (createdUser) {
        localStorage.setItem('currentUser', JSON.stringify(createdUser));
        this.currentUserSubject.next(createdUser);
      }
    }
    return result;
  }

  logout(): void {
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  isLoggedIn(): boolean {
    return !!this.currentUserValue;
  }
}